
back_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000872  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000872  00000906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a6  008000a6  0000094c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b2b  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5a  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfe  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e8  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  8a:	0c 94 37 04 	jmp	0x86e	; 0x86e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_int>:
	//LCD_clear();
}
void end_mode(void)
{
	LCDsendStringData("machine is done");
	LCD_clear();
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	66 e0       	ldi	r22, 0x06	; 6
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
  ec:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_Init>
  f0:	08 95       	ret

000000f2 <welcome_mode>:
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	65 e0       	ldi	r22, 0x05	; 5
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 106:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
 10a:	80 e6       	ldi	r24, 0x60	; 96
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
 112:	2f eb       	ldi	r18, 0xBF	; 191
 114:	87 e2       	ldi	r24, 0x27	; 39
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <welcome_mode+0x26>
 120:	00 c0       	rjmp	.+0      	; 0x122 <welcome_mode+0x30>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <filling_bottle_1>:
}
void filling_bottle_1(void)
{
	DIO_write(output_port,filling_motor,high);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	67 e0       	ldi	r22, 0x07	; 7
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCD_clear();
 130:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling processing ");
 134:	8e e7       	ldi	r24, 0x7E	; 126
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
	led_blink(output_port,botel_1,10);
 13c:	4a e0       	ldi	r20, 0x0A	; 10
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 43 02 	call	0x486	; 0x486 <led_blink>
	DIO_write(output_port,filling_motor,low);
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	67 e0       	ldi	r22, 0x07	; 7
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	led_on(PORT_D,botel_1);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 3f 02 	call	0x47e	; 0x47e <led_on>
	LCD_clear();
 15a:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling done");
 15e:	82 e9       	ldi	r24, 0x92	; 146
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f eb       	ldi	r18, 0xBF	; 191
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <filling_bottle_1+0x46>
 174:	00 c0       	rjmp	.+0      	; 0x176 <filling_bottle_1+0x50>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <filling_bottle_2>:
	
	
}
void filling_bottle_2(void)
{
	DIO_write(output_port,filling_motor,high);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	67 e0       	ldi	r22, 0x07	; 7
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCD_clear();
 184:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling processing ");
 188:	8e e7       	ldi	r24, 0x7E	; 126
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
	led_blink(output_port,botel_2,10);
 190:	4a e0       	ldi	r20, 0x0A	; 10
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 43 02 	call	0x486	; 0x486 <led_blink>
	DIO_write(output_port,filling_motor,low);
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	67 e0       	ldi	r22, 0x07	; 7
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	led_on(output_port,botel_2);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 3f 02 	call	0x47e	; 0x47e <led_on>
	LCD_clear();
 1ae:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling done");
 1b2:	82 e9       	ldi	r24, 0x92	; 146
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
 1ba:	2f eb       	ldi	r18, 0xBF	; 191
 1bc:	87 e2       	ldi	r24, 0x27	; 39
 1be:	99 e0       	ldi	r25, 0x09	; 9
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <filling_bottle_2+0x46>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <filling_bottle_2+0x50>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <filling_bottle_3>:
	
	
}
void filling_bottle_3(void)
{
	DIO_write(PORT_D,filling_motor,high);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	67 e0       	ldi	r22, 0x07	; 7
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCD_clear();
 1d8:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling processing ");
 1dc:	8e e7       	ldi	r24, 0x7E	; 126
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
	led_blink(PORT_D,botel_3,10);
 1e4:	4a e0       	ldi	r20, 0x0A	; 10
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	0e 94 43 02 	call	0x486	; 0x486 <led_blink>
	DIO_write(PORT_D,filling_motor,low);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	led_on(PORT_D,botel_3);
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 3f 02 	call	0x47e	; 0x47e <led_on>
	LCD_clear();
 202:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling done");
 206:	82 e9       	ldi	r24, 0x92	; 146
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
 20e:	2f eb       	ldi	r18, 0xBF	; 191
 210:	87 e2       	ldi	r24, 0x27	; 39
 212:	99 e0       	ldi	r25, 0x09	; 9
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <filling_bottle_3+0x46>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <filling_bottle_3+0x50>
 21e:	00 00       	nop
 220:	08 95       	ret

00000222 <filling_bottle_4>:
	
	
}
void filling_bottle_4(void)
{
	DIO_write(PORT_D,filling_motor,high);
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCD_clear();
 22c:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("filling processing ");
 230:	8e e7       	ldi	r24, 0x7E	; 126
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
	led_blink(PORT_D,botel_4,10);
 238:	4a e0       	ldi	r20, 0x0A	; 10
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 43 02 	call	0x486	; 0x486 <led_blink>
	DIO_write(PORT_D,filling_motor,low);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	led_on(PORT_D,botel_4);
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	0e 94 3f 02 	call	0x47e	; 0x47e <led_on>
	LCD_clear();
 256:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	DIO_write(output_port,green,low);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	65 e0       	ldi	r22, 0x05	; 5
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(output_port,red,high);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCDsendStringData("filling done");
 26e:	82 e9       	ldi	r24, 0x92	; 146
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
 276:	2f eb       	ldi	r18, 0xBF	; 191
 278:	87 e2       	ldi	r24, 0x27	; 39
 27a:	99 e0       	ldi	r25, 0x09	; 9
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <filling_bottle_4+0x5a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <filling_bottle_4+0x64>
 286:	00 00       	nop
 288:	08 95       	ret

0000028a <routing>:
	
	
}
void routing(void)
{
	DIO_write(PORT_D,routiting_motor,high);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	LCD_clear();
 294:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_clear>
	LCDsendStringData("wait  ");
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 09 02 	call	0x412	; 0x412 <LCDsendStringData>
 2a0:	2f eb       	ldi	r18, 0xBF	; 191
 2a2:	87 e2       	ldi	r24, 0x27	; 39
 2a4:	99 e0       	ldi	r25, 0x09	; 9
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <routing+0x1c>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <routing+0x26>
 2b0:	00 00       	nop
	_delay_ms(3000);
	DIO_write(PORT_D,routiting_motor,low);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 2bc:	08 95       	ret

000002be <app_st>:
	
}
void app_st(void)
{
	DIO_write(output_port,botel_1,low);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(output_port,botel_2,low);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(output_port,botel_3,low);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(output_port,botel_4,low);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	welcome_mode();
 2e6:	0e 94 79 00 	call	0xf2	; 0xf2 <welcome_mode>
	filling_bottle_1();
 2ea:	0e 94 93 00 	call	0x126	; 0x126 <filling_bottle_1>
	routing();
 2ee:	0e 94 45 01 	call	0x28a	; 0x28a <routing>
	filling_bottle_2();
 2f2:	0e 94 bd 00 	call	0x17a	; 0x17a <filling_bottle_2>
	routing();
 2f6:	0e 94 45 01 	call	0x28a	; 0x28a <routing>
	filling_bottle_3();
 2fa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <filling_bottle_3>
	routing();
 2fe:	0e 94 45 01 	call	0x28a	; 0x28a <routing>
	filling_bottle_4();
 302:	0e 94 11 01 	call	0x222	; 0x222 <filling_bottle_4>
 306:	08 95       	ret

00000308 <LCDsendComand>:
 * Created: 1/4/2023 4:57:17 PM
 *  Author: ayman
 */ 
#include "LCD.h"
void LCDsendComand (u8 Command)
{
 308:	cf 93       	push	r28
 30a:	c8 2f       	mov	r28, r24
	//set RS 0 for command
	DIO_write(CONROL_PORT,RS,low);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
	//set rw 0 for write comand
	DIO_write(CONROL_PORT,RW,low);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
	/* set command to data pins */
	//DIO_SetPort(LCD_PORT_DATA,Command);
	PORTC = Command ;
 320:	c5 bb       	out	0x15, r28	; 21
	
	 /* set eneble pulse */
	 DIO_write(CONROL_PORT,E,high);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 32c:	83 ef       	ldi	r24, 0xF3	; 243
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCDsendComand+0x28>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCDsendComand+0x2e>
 336:	00 00       	nop
	 //timer_2mSec();
	 _delay_ms(2); 
	 DIO_write(CONROL_PORT,E,low);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	62 e0       	ldi	r22, 0x02	; 2
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <LCDsendData>:
void  LCDsendData (u8 data)
{
 346:	cf 93       	push	r28
 348:	c8 2f       	mov	r28, r24
	//set RS 1 for data
	DIO_write(CONROL_PORT,RS,high);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
	//set rw 0 for write data
	DIO_write(CONROL_PORT,RW,low);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
	/* set command to data pins */
	//DIO_SetPort(LCD_PORT_DATA,data);
	PORTC = data ;
 35e:	c5 bb       	out	0x15, r28	; 21
	
	/* set eneble pulse */
	DIO_write(CONROL_PORT,E,high);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 36a:	83 ef       	ldi	r24, 0xF3	; 243
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDsendData+0x28>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCDsendData+0x2e>
 374:	00 00       	nop
	 _delay_ms(2); 
	DIO_write(CONROL_PORT,E,low);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	
}
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <LCD_Init>:
void  LCD_Init (void)
{
	DIO_init(CONROL_PORT,RS,output);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(CONROL_PORT,RW,output);
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(CONROL_PORT,E,output);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	62 e0       	ldi	r22, 0x02	; 2
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	
	DIO_init(LCD_PORT,0,output);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,1,output);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,2,output);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,3,output);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,4,output);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,5,output);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	65 e0       	ldi	r22, 0x05	; 5
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,6,output);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	66 e0       	ldi	r22, 0x06	; 6
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
	DIO_init(LCD_PORT,7,output);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	67 e0       	ldi	r22, 0x07	; 7
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_init>
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	97 e2       	ldi	r25, 0x27	; 39
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_Init+0x72>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_Init+0x78>
 3fc:	00 00       	nop
	
	
	 _delay_ms(40); 
		/* function set command : 2 line ,5*8 font size */
	LCDsendComand(0b00111000);
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	0e 94 84 01 	call	0x308	; 0x308 <LCDsendComand>
	
	/* display on off control */
	LCDsendComand(0b00001100);
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	0e 94 84 01 	call	0x308	; 0x308 <LCDsendComand>
	
	/* display clear */
	LCDsendComand(0b00000001);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 84 01 	call	0x308	; 0x308 <LCDsendComand>
 410:	08 95       	ret

00000412 <LCDsendStringData>:

}
void  LCDsendStringData(  char * data)
{
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	8c 01       	movw	r16, r24
		u8 i = 0 ;
 41a:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0')
 41c:	03 c0       	rjmp	.+6      	; 0x424 <LCDsendStringData+0x12>
	{
	LCDsendData	(data[i]);
 41e:	0e 94 a3 01 	call	0x346	; 0x346 <LCDsendData>
	i++;
 422:	cf 5f       	subi	r28, 0xFF	; 255

}
void  LCDsendStringData(  char * data)
{
		u8 i = 0 ;
	while(data[i] != '\0')
 424:	f8 01       	movw	r30, r16
 426:	ec 0f       	add	r30, r28
 428:	f1 1d       	adc	r31, r1
 42a:	80 81       	ld	r24, Z
 42c:	81 11       	cpse	r24, r1
 42e:	f7 cf       	rjmp	.-18     	; 0x41e <LCDsendStringData+0xc>
	{
	LCDsendData	(data[i]);
	i++;
	}
}
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <LCD_clear>:
void  LCD_clear()
{
	PORTC=0x01;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	85 bb       	out	0x15, r24	; 21
	DIO_write(CONROL_PORT,RS,low);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(CONROL_PORT,RW,low);
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
	DIO_write(CONROL_PORT,E,high);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 45a:	83 ef       	ldi	r24, 0xF3	; 243
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_clear+0x26>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_clear+0x2c>
 464:	00 00       	nop
	_delay_ms(2);
	DIO_write(CONROL_PORT,E,low);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 470:	83 ec       	ldi	r24, 0xC3	; 195
 472:	99 e0       	ldi	r25, 0x09	; 9
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <LCD_clear+0x3c>
 478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_clear+0x42>
 47a:	00 00       	nop
 47c:	08 95       	ret

0000047e <led_on>:
	DIO_write(PortNumber,PinNumber,low);
	
}
void led_togle(u8 PortNumber, u8 PinNumber )
{
		DIO_toggle(PortNumber,PinNumber);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 06 03 	call	0x60c	; 0x60c <DIO_write>
 484:	08 95       	ret

00000486 <led_blink>:
}
void led_blink(u8 PortNumber, u8 PinNumber , int sec )
{
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	e8 2e       	mov	r14, r24
 494:	f6 2e       	mov	r15, r22
	sec=sec*8;
 496:	8a 01       	movw	r16, r20
 498:	00 0f       	add	r16, r16
 49a:	11 1f       	adc	r17, r17
 49c:	00 0f       	add	r16, r16
 49e:	11 1f       	adc	r17, r17
 4a0:	00 0f       	add	r16, r16
 4a2:	11 1f       	adc	r17, r17
	for(int i = 0 ; i<sec ; i++)
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <led_blink+0x3a>
	{
		DIO_toggle(PortNumber,PinNumber);
 4aa:	6f 2d       	mov	r22, r15
 4ac:	8e 2d       	mov	r24, r14
 4ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <DIO_toggle>
 4b2:	81 e1       	ldi	r24, 0x11	; 17
 4b4:	9a e7       	ldi	r25, 0x7A	; 122
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <led_blink+0x30>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <led_blink+0x36>
 4bc:	00 00       	nop
		DIO_toggle(PortNumber,PinNumber);
}
void led_blink(u8 PortNumber, u8 PinNumber , int sec )
{
	sec=sec*8;
	for(int i = 0 ; i<sec ; i++)
 4be:	21 96       	adiw	r28, 0x01	; 1
 4c0:	c0 17       	cp	r28, r16
 4c2:	d1 07       	cpc	r29, r17
 4c4:	94 f3       	brlt	.-28     	; 0x4aa <led_blink+0x24>
		DIO_toggle(PortNumber,PinNumber);
		_delay_ms(125);
		
	}
	
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	08 95       	ret

000004d4 <main>:
#include "app/app.h"



int main(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
    
	app_int();
 4de:	0e 94 49 00 	call	0x92	; 0x92 <app_int>
	u8 x ;
	while (1) 
    {
	DIO_read(CONROL_PORT,button,&x);
 4e2:	ae 01       	movw	r20, r28
 4e4:	4f 5f       	subi	r20, 0xFF	; 255
 4e6:	5f 4f       	sbci	r21, 0xFF	; 255
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_read>
		if (x==1)
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	b1 f7       	brne	.-20     	; 0x4e2 <main+0xe>
		{
			app_st();
 4f6:	0e 94 5f 01 	call	0x2be	; 0x2be <app_st>
 4fa:	f3 cf       	rjmp	.-26     	; 0x4e2 <main+0xe>

000004fc <DIO_init>:
 */ 
#include "dio.h"

u8 DIO_init(u8 PortNumber , u8 PinNumber , u8 direction)
{
	error_state = ok ;
 4fc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	
	 if (direction == input)
 500:	41 11       	cpse	r20, r1
 502:	40 c0       	rjmp	.+128    	; 0x584 <DIO_init+0x88>
	 {
		 switch (PortNumber) 
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	99 f0       	breq	.+38     	; 0x52e <DIO_init+0x32>
 508:	28 f0       	brcs	.+10     	; 0x514 <DIO_init+0x18>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	e9 f0       	breq	.+58     	; 0x548 <DIO_init+0x4c>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	41 f1       	breq	.+80     	; 0x562 <DIO_init+0x66>
 512:	34 c0       	rjmp	.+104    	; 0x57c <DIO_init+0x80>
		 {
			 case PORT_A :DDRA= CLR_BIT (DDRA,PinNumber);break;
 514:	2a b3       	in	r18, 0x1a	; 26
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_init+0x24>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_init+0x20>
 524:	80 95       	com	r24
 526:	82 23       	and	r24, r18
 528:	8a bb       	out	0x1a, r24	; 26
 52a:	8a bb       	out	0x1a, r24	; 26
 52c:	6c c0       	rjmp	.+216    	; 0x606 <DIO_init+0x10a>
			 case PORT_B :DDRB= CLR_BIT (DDRB,PinNumber);break;
 52e:	27 b3       	in	r18, 0x17	; 23
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_init+0x3e>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_init+0x3a>
 53e:	80 95       	com	r24
 540:	82 23       	and	r24, r18
 542:	87 bb       	out	0x17, r24	; 23
 544:	87 bb       	out	0x17, r24	; 23
 546:	5f c0       	rjmp	.+190    	; 0x606 <DIO_init+0x10a>
			 case PORT_C: DDRC= CLR_BIT (DDRC,PinNumber);break;
 548:	24 b3       	in	r18, 0x14	; 20
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_init+0x58>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_init+0x54>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	84 bb       	out	0x14, r24	; 20
 55e:	84 bb       	out	0x14, r24	; 20
 560:	52 c0       	rjmp	.+164    	; 0x606 <DIO_init+0x10a>
			 case PORT_D :DDRD= CLR_BIT (DDRD,PinNumber);break;
 562:	21 b3       	in	r18, 0x11	; 17
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_init+0x72>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_init+0x6e>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	81 bb       	out	0x11, r24	; 17
 578:	81 bb       	out	0x11, r24	; 17
 57a:	45 c0       	rjmp	.+138    	; 0x606 <DIO_init+0x10a>
			 default:error_state = Not_ok ;break;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 582:	41 c0       	rjmp	.+130    	; 0x606 <DIO_init+0x10a>
		 }
		 
	 }else if (direction==output) 
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	e1 f5       	brne	.+120    	; 0x600 <DIO_init+0x104>
	 {
		 switch (PortNumber)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	91 f0       	breq	.+36     	; 0x5b0 <DIO_init+0xb4>
 58c:	28 f0       	brcs	.+10     	; 0x598 <DIO_init+0x9c>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	d9 f0       	breq	.+54     	; 0x5c8 <DIO_init+0xcc>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	29 f1       	breq	.+74     	; 0x5e0 <DIO_init+0xe4>
 596:	30 c0       	rjmp	.+96     	; 0x5f8 <DIO_init+0xfc>
		 {
			 case PORT_A :DDRA= SET_BIT (DDRA,PinNumber);break;
 598:	2a b3       	in	r18, 0x1a	; 26
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_init+0xa8>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_init+0xa4>
 5a8:	82 2b       	or	r24, r18
 5aa:	8a bb       	out	0x1a, r24	; 26
 5ac:	8a bb       	out	0x1a, r24	; 26
 5ae:	2b c0       	rjmp	.+86     	; 0x606 <DIO_init+0x10a>
			 case PORT_B :DDRB= SET_BIT (DDRB,PinNumber);break;
 5b0:	27 b3       	in	r18, 0x17	; 23
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_init+0xc0>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_init+0xbc>
 5c0:	82 2b       	or	r24, r18
 5c2:	87 bb       	out	0x17, r24	; 23
 5c4:	87 bb       	out	0x17, r24	; 23
 5c6:	1f c0       	rjmp	.+62     	; 0x606 <DIO_init+0x10a>
			 case PORT_C: DDRC= SET_BIT (DDRC,PinNumber);break;
 5c8:	24 b3       	in	r18, 0x14	; 20
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_init+0xd8>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_init+0xd4>
 5d8:	82 2b       	or	r24, r18
 5da:	84 bb       	out	0x14, r24	; 20
 5dc:	84 bb       	out	0x14, r24	; 20
 5de:	13 c0       	rjmp	.+38     	; 0x606 <DIO_init+0x10a>
			 case PORT_D :DDRD= SET_BIT (DDRD,PinNumber);break;
 5e0:	21 b3       	in	r18, 0x11	; 17
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_init+0xf0>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_init+0xec>
 5f0:	82 2b       	or	r24, r18
 5f2:	81 bb       	out	0x11, r24	; 17
 5f4:	81 bb       	out	0x11, r24	; 17
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <DIO_init+0x10a>
			 default:error_state = Not_ok ;break;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <DIO_init+0x10a>

		 }
      }else
	  {
		  //error
		  error_state = Not_ok ;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>

	  } 
	  return error_state ;
}
 606:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 60a:	08 95       	ret

0000060c <DIO_write>:
u8 DIO_write(u8 PortNumber , u8 PinNumber , u8 value)
{
	error_state = ok ;
 60c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	if (value == low)
 610:	41 11       	cpse	r20, r1
 612:	40 c0       	rjmp	.+128    	; 0x694 <DIO_write+0x88>
	{
		switch (PortNumber)
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	99 f0       	breq	.+38     	; 0x63e <DIO_write+0x32>
 618:	28 f0       	brcs	.+10     	; 0x624 <DIO_write+0x18>
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	e9 f0       	breq	.+58     	; 0x658 <DIO_write+0x4c>
 61e:	83 30       	cpi	r24, 0x03	; 3
 620:	41 f1       	breq	.+80     	; 0x672 <DIO_write+0x66>
 622:	34 c0       	rjmp	.+104    	; 0x68c <DIO_write+0x80>
		{
			case PORT_A :PORTA= CLR_BIT (PORTA,PinNumber);break;
 624:	2b b3       	in	r18, 0x1b	; 27
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_write+0x24>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_write+0x20>
 634:	80 95       	com	r24
 636:	82 23       	and	r24, r18
 638:	8b bb       	out	0x1b, r24	; 27
 63a:	8b bb       	out	0x1b, r24	; 27
 63c:	6c c0       	rjmp	.+216    	; 0x716 <DIO_write+0x10a>
			case PORT_B :PORTB= CLR_BIT (PORTB,PinNumber);break;
 63e:	28 b3       	in	r18, 0x18	; 24
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_write+0x3e>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_write+0x3a>
 64e:	80 95       	com	r24
 650:	82 23       	and	r24, r18
 652:	88 bb       	out	0x18, r24	; 24
 654:	88 bb       	out	0x18, r24	; 24
 656:	5f c0       	rjmp	.+190    	; 0x716 <DIO_write+0x10a>
			case PORT_C: PORTC= CLR_BIT (PORTC,PinNumber);break;
 658:	25 b3       	in	r18, 0x15	; 21
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_write+0x58>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_write+0x54>
 668:	80 95       	com	r24
 66a:	82 23       	and	r24, r18
 66c:	85 bb       	out	0x15, r24	; 21
 66e:	85 bb       	out	0x15, r24	; 21
 670:	52 c0       	rjmp	.+164    	; 0x716 <DIO_write+0x10a>
			case PORT_D :PORTD= CLR_BIT (PORTD,PinNumber);break;
 672:	22 b3       	in	r18, 0x12	; 18
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_write+0x72>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_write+0x6e>
 682:	80 95       	com	r24
 684:	82 23       	and	r24, r18
 686:	82 bb       	out	0x12, r24	; 18
 688:	82 bb       	out	0x12, r24	; 18
 68a:	45 c0       	rjmp	.+138    	; 0x716 <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 692:	41 c0       	rjmp	.+130    	; 0x716 <DIO_write+0x10a>
		}
		
	}else if (value==high)
 694:	41 30       	cpi	r20, 0x01	; 1
 696:	e1 f5       	brne	.+120    	; 0x710 <DIO_write+0x104>
	{
		switch (PortNumber)
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	91 f0       	breq	.+36     	; 0x6c0 <DIO_write+0xb4>
 69c:	28 f0       	brcs	.+10     	; 0x6a8 <DIO_write+0x9c>
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	d9 f0       	breq	.+54     	; 0x6d8 <DIO_write+0xcc>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	29 f1       	breq	.+74     	; 0x6f0 <DIO_write+0xe4>
 6a6:	30 c0       	rjmp	.+96     	; 0x708 <DIO_write+0xfc>
		{
			case PORT_A :PORTA= SET_BIT (PORTA,PinNumber);break;
 6a8:	2b b3       	in	r18, 0x1b	; 27
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_write+0xa8>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_write+0xa4>
 6b8:	82 2b       	or	r24, r18
 6ba:	8b bb       	out	0x1b, r24	; 27
 6bc:	8b bb       	out	0x1b, r24	; 27
 6be:	2b c0       	rjmp	.+86     	; 0x716 <DIO_write+0x10a>
			case PORT_B :PORTB= SET_BIT (PORTB,PinNumber);break;
 6c0:	28 b3       	in	r18, 0x18	; 24
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_write+0xc0>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_write+0xbc>
 6d0:	82 2b       	or	r24, r18
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	88 bb       	out	0x18, r24	; 24
 6d6:	1f c0       	rjmp	.+62     	; 0x716 <DIO_write+0x10a>
			case PORT_C: PORTC= SET_BIT (PORTC,PinNumber);break;
 6d8:	25 b3       	in	r18, 0x15	; 21
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_write+0xd8>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_write+0xd4>
 6e8:	82 2b       	or	r24, r18
 6ea:	85 bb       	out	0x15, r24	; 21
 6ec:	85 bb       	out	0x15, r24	; 21
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <DIO_write+0x10a>
			case PORT_D :PORTD= SET_BIT (PORTD,PinNumber);break;
 6f0:	22 b3       	in	r18, 0x12	; 18
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_write+0xf0>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_write+0xec>
 700:	82 2b       	or	r24, r18
 702:	82 bb       	out	0x12, r24	; 18
 704:	82 bb       	out	0x12, r24	; 18
 706:	07 c0       	rjmp	.+14     	; 0x716 <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 70e:	03 c0       	rjmp	.+6      	; 0x716 <DIO_write+0x10a>
			
		}
	}else
	{
		//error
		error_state = Not_ok ;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
	}
	return error_state ;
}
 716:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 71a:	08 95       	ret

0000071c <DIO_read>:
u8 DIO_read(u8 PortNumber , u8 PinNumber , u8 * value)
{
	error_state = ok ;
 71c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	switch (PortNumber)
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	e9 f0       	breq	.+58     	; 0x75e <DIO_read+0x42>
 724:	30 f0       	brcs	.+12     	; 0x732 <DIO_read+0x16>
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	81 f1       	breq	.+96     	; 0x78a <DIO_read+0x6e>
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	09 f4       	brne	.+2      	; 0x730 <DIO_read+0x14>
 72e:	43 c0       	rjmp	.+134    	; 0x7b6 <DIO_read+0x9a>
 730:	58 c0       	rjmp	.+176    	; 0x7e2 <DIO_read+0xc6>
	{
		case PORT_A : * value = GET_BIT(PINA,PinNumber);break;
 732:	79 b3       	in	r23, 0x19	; 25
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	9c 01       	movw	r18, r24
 73a:	06 2e       	mov	r0, r22
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_read+0x26>
 73e:	22 0f       	add	r18, r18
 740:	33 1f       	adc	r19, r19
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_read+0x22>
 746:	87 2f       	mov	r24, r23
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	82 23       	and	r24, r18
 74c:	93 23       	and	r25, r19
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_read+0x38>
 750:	95 95       	asr	r25
 752:	87 95       	ror	r24
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_read+0x34>
 758:	fa 01       	movw	r30, r20
 75a:	80 83       	st	Z, r24
 75c:	45 c0       	rjmp	.+138    	; 0x7e8 <DIO_read+0xcc>
		case PORT_B : * value = GET_BIT(PINB,PinNumber);break;
 75e:	76 b3       	in	r23, 0x16	; 22
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	9c 01       	movw	r18, r24
 766:	06 2e       	mov	r0, r22
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_read+0x52>
 76a:	22 0f       	add	r18, r18
 76c:	33 1f       	adc	r19, r19
 76e:	0a 94       	dec	r0
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_read+0x4e>
 772:	87 2f       	mov	r24, r23
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	82 23       	and	r24, r18
 778:	93 23       	and	r25, r19
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_read+0x64>
 77c:	95 95       	asr	r25
 77e:	87 95       	ror	r24
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_read+0x60>
 784:	fa 01       	movw	r30, r20
 786:	80 83       	st	Z, r24
 788:	2f c0       	rjmp	.+94     	; 0x7e8 <DIO_read+0xcc>
		case PORT_C : * value = GET_BIT(PINC,PinNumber);break;
 78a:	73 b3       	in	r23, 0x13	; 19
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	9c 01       	movw	r18, r24
 792:	06 2e       	mov	r0, r22
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_read+0x7e>
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	0a 94       	dec	r0
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_read+0x7a>
 79e:	87 2f       	mov	r24, r23
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	82 23       	and	r24, r18
 7a4:	93 23       	and	r25, r19
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_read+0x90>
 7a8:	95 95       	asr	r25
 7aa:	87 95       	ror	r24
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_read+0x8c>
 7b0:	fa 01       	movw	r30, r20
 7b2:	80 83       	st	Z, r24
 7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <DIO_read+0xcc>
		case PORT_D : * value = GET_BIT(PIND,PinNumber);break;
 7b6:	70 b3       	in	r23, 0x10	; 16
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	9c 01       	movw	r18, r24
 7be:	06 2e       	mov	r0, r22
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_read+0xaa>
 7c2:	22 0f       	add	r18, r18
 7c4:	33 1f       	adc	r19, r19
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_read+0xa6>
 7ca:	87 2f       	mov	r24, r23
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	82 23       	and	r24, r18
 7d0:	93 23       	and	r25, r19
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_read+0xbc>
 7d4:	95 95       	asr	r25
 7d6:	87 95       	ror	r24
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_read+0xb8>
 7dc:	fa 01       	movw	r30, r20
 7de:	80 83       	st	Z, r24
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <DIO_read+0xcc>
		default:error_state = Not_ok;break;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
	}
	return error_state ;
}
 7e8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 7ec:	08 95       	ret

000007ee <DIO_toggle>:
u8 DIO_toggle(u8 PortNumber , u8 PinNumber )
{
	error_state = ok ;
 7ee:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	switch (PortNumber)
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	91 f0       	breq	.+36     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f6:	28 f0       	brcs	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	d9 f0       	breq	.+54     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	29 f1       	breq	.+74     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 800:	30 c0       	rjmp	.+96     	; 0x862 <__stack+0x3>
	{
		case PORT_A :PORTA= TOGGLE_BIT (PORTA,PinNumber);break;
 802:	2b b3       	in	r18, 0x1b	; 27
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	82 27       	eor	r24, r18
 814:	8b bb       	out	0x1b, r24	; 27
 816:	8b bb       	out	0x1b, r24	; 27
 818:	27 c0       	rjmp	.+78     	; 0x868 <__stack+0x9>
		case PORT_B :PORTB= TOGGLE_BIT (PORTB,PinNumber);break;
 81a:	28 b3       	in	r18, 0x18	; 24
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	6a 95       	dec	r22
 828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	82 27       	eor	r24, r18
 82c:	88 bb       	out	0x18, r24	; 24
 82e:	88 bb       	out	0x18, r24	; 24
 830:	1b c0       	rjmp	.+54     	; 0x868 <__stack+0x9>
		case PORT_C: PORTC= TOGGLE_BIT (PORTC,PinNumber);break;
 832:	25 b3       	in	r18, 0x15	; 21
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 842:	82 27       	eor	r24, r18
 844:	85 bb       	out	0x15, r24	; 21
 846:	85 bb       	out	0x15, r24	; 21
 848:	0f c0       	rjmp	.+30     	; 0x868 <__stack+0x9>
		case PORT_D :PORTD= TOGGLE_BIT (PORTD,PinNumber);break;
 84a:	22 b3       	in	r18, 0x12	; 18
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	6a 95       	dec	r22
 858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	82 27       	eor	r24, r18
 85c:	82 bb       	out	0x12, r24	; 18
 85e:	82 bb       	out	0x12, r24	; 18
 860:	03 c0       	rjmp	.+6      	; 0x868 <__stack+0x9>
		default:error_state = Not_ok;break;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
	}
	return error_state ;
}
 868:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 86c:	08 95       	ret

0000086e <_exit>:
 86e:	f8 94       	cli

00000870 <__stop_program>:
 870:	ff cf       	rjmp	.-2      	; 0x870 <__stop_program>
