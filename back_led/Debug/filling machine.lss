
filling machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000d6  008000d6  00000970  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad2  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5a  00000000  00000000  000025de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bef  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a0  00000000  00000000  0000436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3d       	cpi	r26, 0xD7	; 215
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  8a:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_int>:
#include <util/delay.h> 
#include "../app/app.h"

void app_int(void)
{
DIO_init(output_port,routiting_motor,output);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	66 e0       	ldi	r22, 0x06	; 6
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,filling_motor,output);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,botel_1,output);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,botel_2,output);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,botel_3,output);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,botel_4,output);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,red,output);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(output_port,green,output);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
DIO_init(CONROL_PORT,button,input);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
LCD_Init();	
  ec:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_Init>
  f0:	08 95       	ret

000000f2 <welcome_mode>:
	
}
void welcome_mode(void)
{
	DIO_write(output_port,green,high);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	65 e0       	ldi	r22, 0x05	; 5
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(output_port,red,low);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 106:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("...welcome...");
 10a:	80 e6       	ldi	r24, 0x60	; 96
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f eb       	ldi	r18, 0xBF	; 191
 114:	87 e2       	ldi	r24, 0x27	; 39
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <welcome_mode+0x26>
 120:	00 c0       	rjmp	.+0      	; 0x122 <welcome_mode+0x30>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <end_mode>:
	_delay_ms(3000);
	//LCD_clear();
}
void end_mode(void)
{
	DIO_write(output_port,green,low);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	65 e0       	ldi	r22, 0x05	; 5
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(output_port,red,high);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	64 e0       	ldi	r22, 0x04	; 4
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 13a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("machine is done");
 13e:	8e e6       	ldi	r24, 0x6E	; 110
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
 146:	08 95       	ret

00000148 <filling_bottle_1>:
	
}
void filling_bottle_1(void)
{
	DIO_write(output_port,filling_motor,high);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	67 e0       	ldi	r22, 0x07	; 7
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 152:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling bottle 1");
 156:	8e e7       	ldi	r24, 0x7E	; 126
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
	led_blink(output_port,botel_1,10);
 15e:	4a e0       	ldi	r20, 0x0A	; 10
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 3d 02 	call	0x47a	; 0x47a <led_blink>
	DIO_write(output_port,filling_motor,low);
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	67 e0       	ldi	r22, 0x07	; 7
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	led_on(PORT_D,botel_1);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 39 02 	call	0x472	; 0x472 <led_on>
	LCD_clear();
 17c:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling done");
 180:	8f e8       	ldi	r24, 0x8F	; 143
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
 188:	2f eb       	ldi	r18, 0xBF	; 191
 18a:	87 e2       	ldi	r24, 0x27	; 39
 18c:	99 e0       	ldi	r25, 0x09	; 9
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <filling_bottle_1+0x46>
 196:	00 c0       	rjmp	.+0      	; 0x198 <filling_bottle_1+0x50>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <filling_bottle_2>:
	
	
}
void filling_bottle_2(void)
{
	DIO_write(output_port,filling_motor,high);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	67 e0       	ldi	r22, 0x07	; 7
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 1a6:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling bottle 2");
 1aa:	8c e9       	ldi	r24, 0x9C	; 156
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
	led_blink(output_port,botel_2,10);
 1b2:	4a e0       	ldi	r20, 0x0A	; 10
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 3d 02 	call	0x47a	; 0x47a <led_blink>
	DIO_write(output_port,filling_motor,low);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	67 e0       	ldi	r22, 0x07	; 7
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	led_on(output_port,botel_2);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 39 02 	call	0x472	; 0x472 <led_on>
	LCD_clear();
 1d0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling done");
 1d4:	8f e8       	ldi	r24, 0x8F	; 143
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
 1dc:	2f eb       	ldi	r18, 0xBF	; 191
 1de:	87 e2       	ldi	r24, 0x27	; 39
 1e0:	99 e0       	ldi	r25, 0x09	; 9
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <filling_bottle_2+0x46>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <filling_bottle_2+0x50>
 1ec:	00 00       	nop
 1ee:	08 95       	ret

000001f0 <filling_bottle_3>:
	
	
}
void filling_bottle_3(void)
{
	DIO_write(PORT_D,filling_motor,high);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 1fa:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling bottle 3");
 1fe:	8d ea       	ldi	r24, 0xAD	; 173
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
	led_blink(PORT_D,botel_3,10);
 206:	4a e0       	ldi	r20, 0x0A	; 10
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 3d 02 	call	0x47a	; 0x47a <led_blink>
	DIO_write(PORT_D,filling_motor,low);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	67 e0       	ldi	r22, 0x07	; 7
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	led_on(PORT_D,botel_3);
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 39 02 	call	0x472	; 0x472 <led_on>
	LCD_clear();
 224:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling done");
 228:	8f e8       	ldi	r24, 0x8F	; 143
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
 230:	2f eb       	ldi	r18, 0xBF	; 191
 232:	87 e2       	ldi	r24, 0x27	; 39
 234:	99 e0       	ldi	r25, 0x09	; 9
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <filling_bottle_3+0x46>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <filling_bottle_3+0x50>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <filling_bottle_4>:
	
	
}
void filling_bottle_4(void)
{
	DIO_write(PORT_D,filling_motor,high);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 24e:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("filling bottle 4");
 252:	8e eb       	ldi	r24, 0xBE	; 190
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
	led_blink(PORT_D,botel_4,10);
 25a:	4a e0       	ldi	r20, 0x0A	; 10
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 3d 02 	call	0x47a	; 0x47a <led_blink>
	DIO_write(PORT_D,filling_motor,low);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	67 e0       	ldi	r22, 0x07	; 7
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	led_on(PORT_D,botel_4);	
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 39 02 	call	0x472	; 0x472 <led_on>
 278:	08 95       	ret

0000027a <routing>:
}
void routing(void)
{
	DIO_write(PORT_D,routiting_motor,high);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	66 e0       	ldi	r22, 0x06	; 6
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	LCD_clear();
 284:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_clear>
	LCDsendStringData("wait  ");
 288:	8f ec       	ldi	r24, 0xCF	; 207
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 03 02 	call	0x406	; 0x406 <LCDsendStringData>
 290:	2f eb       	ldi	r18, 0xBF	; 191
 292:	87 e2       	ldi	r24, 0x27	; 39
 294:	99 e0       	ldi	r25, 0x09	; 9
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <routing+0x1c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <routing+0x26>
 2a0:	00 00       	nop
	_delay_ms(3000);
	DIO_write(PORT_D,routiting_motor,low);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 2ac:	08 95       	ret

000002ae <app_st>:
	
}
void app_st(void)
{
	DIO_write(output_port,botel_1,low);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(output_port,botel_2,low);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(output_port,botel_3,low);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(output_port,botel_4,low);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	welcome_mode();
 2d6:	0e 94 79 00 	call	0xf2	; 0xf2 <welcome_mode>
	filling_bottle_1();
 2da:	0e 94 a4 00 	call	0x148	; 0x148 <filling_bottle_1>
	routing();
 2de:	0e 94 3d 01 	call	0x27a	; 0x27a <routing>
	filling_bottle_2();
 2e2:	0e 94 ce 00 	call	0x19c	; 0x19c <filling_bottle_2>
	routing();
 2e6:	0e 94 3d 01 	call	0x27a	; 0x27a <routing>
	filling_bottle_3();
 2ea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <filling_bottle_3>
	routing();
 2ee:	0e 94 3d 01 	call	0x27a	; 0x27a <routing>
	filling_bottle_4();
 2f2:	0e 94 22 01 	call	0x244	; 0x244 <filling_bottle_4>
	end_mode();
 2f6:	0e 94 93 00 	call	0x126	; 0x126 <end_mode>
 2fa:	08 95       	ret

000002fc <LCDsendComand>:
 * Created: 1/4/2023 4:57:17 PM
 *  Author: ayman
 */ 
#include "LCD.h"
void LCDsendComand (u8 Command)
{
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
	//set RS 0 for command
	DIO_write(CONROL_PORT,RS,low);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
	//set rw 0 for write comand
	DIO_write(CONROL_PORT,RW,low);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
	/* set command to data pins */
	//DIO_SetPort(LCD_PORT_DATA,Command);
	PORTC = Command ;
 314:	c5 bb       	out	0x15, r28	; 21
	
	 /* set eneble pulse */
	 DIO_write(CONROL_PORT,E,high);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 320:	83 ef       	ldi	r24, 0xF3	; 243
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCDsendComand+0x28>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCDsendComand+0x2e>
 32a:	00 00       	nop
	 //timer_2mSec();
	 _delay_ms(2); 
	 DIO_write(CONROL_PORT,E,low);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
}
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCDsendData>:
void  LCDsendData (u8 data)
{
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
	//set RS 1 for data
	DIO_write(CONROL_PORT,RS,high);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
	//set rw 0 for write data
	DIO_write(CONROL_PORT,RW,low);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
	/* set command to data pins */
	//DIO_SetPort(LCD_PORT_DATA,data);
	PORTC = data ;
 352:	c5 bb       	out	0x15, r28	; 21
	
	/* set eneble pulse */
	DIO_write(CONROL_PORT,E,high);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 35e:	83 ef       	ldi	r24, 0xF3	; 243
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCDsendData+0x28>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCDsendData+0x2e>
 368:	00 00       	nop
	 _delay_ms(2); 
	DIO_write(CONROL_PORT,E,low);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <LCD_Init>:
void  LCD_Init (void)
{
	DIO_init(CONROL_PORT,RS,output);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(CONROL_PORT,RW,output);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(CONROL_PORT,E,output);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	
	DIO_init(LCD_PORT,0,output);
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,1,output);
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,2,output);
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,3,output);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	63 e0       	ldi	r22, 0x03	; 3
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,4,output);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,5,output);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	65 e0       	ldi	r22, 0x05	; 5
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,6,output);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	66 e0       	ldi	r22, 0x06	; 6
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
	DIO_init(LCD_PORT,7,output);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	67 e0       	ldi	r22, 0x07	; 7
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_init>
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	97 e2       	ldi	r25, 0x27	; 39
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Init+0x72>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Init+0x78>
 3f0:	00 00       	nop
	
	
	 _delay_ms(40); 
		/* function set command : 2 line ,5*8 font size */
	LCDsendComand(0b00111000);
 3f2:	88 e3       	ldi	r24, 0x38	; 56
 3f4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDsendComand>
	
	/* display on off control */
	LCDsendComand(0b00001100);
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDsendComand>
	
	/* display clear */
	LCDsendComand(0b00000001);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDsendComand>
 404:	08 95       	ret

00000406 <LCDsendStringData>:

}
void  LCDsendStringData(  char * data)
{
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	8c 01       	movw	r16, r24
		u8 i = 0 ;
 40e:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0')
 410:	03 c0       	rjmp	.+6      	; 0x418 <LCDsendStringData+0x12>
	{
	LCDsendData	(data[i]);
 412:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDsendData>
	i++;
 416:	cf 5f       	subi	r28, 0xFF	; 255

}
void  LCDsendStringData(  char * data)
{
		u8 i = 0 ;
	while(data[i] != '\0')
 418:	f8 01       	movw	r30, r16
 41a:	ec 0f       	add	r30, r28
 41c:	f1 1d       	adc	r31, r1
 41e:	80 81       	ld	r24, Z
 420:	81 11       	cpse	r24, r1
 422:	f7 cf       	rjmp	.-18     	; 0x412 <LCDsendStringData+0xc>
	{
	LCDsendData	(data[i]);
	i++;
	}
}
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <LCD_clear>:
void  LCD_clear()
{
	PORTC=0x01;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	85 bb       	out	0x15, r24	; 21
	DIO_write(CONROL_PORT,RS,low);
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(CONROL_PORT,RW,low);
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
	DIO_write(CONROL_PORT,E,high);
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	62 e0       	ldi	r22, 0x02	; 2
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 44e:	83 ef       	ldi	r24, 0xF3	; 243
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <LCD_clear+0x26>
 456:	00 c0       	rjmp	.+0      	; 0x458 <LCD_clear+0x2c>
 458:	00 00       	nop
	_delay_ms(2);
	DIO_write(CONROL_PORT,E,low);
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 464:	83 ec       	ldi	r24, 0xC3	; 195
 466:	99 e0       	ldi	r25, 0x09	; 9
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_clear+0x3c>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <LCD_clear+0x42>
 46e:	00 00       	nop
 470:	08 95       	ret

00000472 <led_on>:
	DIO_write(PortNumber,PinNumber,low);
	
}
void led_togle(u8 PortNumber, u8 PinNumber )
{
		DIO_toggle(PortNumber,PinNumber);
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	0e 94 00 03 	call	0x600	; 0x600 <DIO_write>
 478:	08 95       	ret

0000047a <led_blink>:
}
void led_blink(u8 PortNumber, u8 PinNumber , int sec )
{
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	e8 2e       	mov	r14, r24
 488:	f6 2e       	mov	r15, r22
	sec=sec*8;
 48a:	8a 01       	movw	r16, r20
 48c:	00 0f       	add	r16, r16
 48e:	11 1f       	adc	r17, r17
 490:	00 0f       	add	r16, r16
 492:	11 1f       	adc	r17, r17
 494:	00 0f       	add	r16, r16
 496:	11 1f       	adc	r17, r17
	for(int i = 0 ; i<sec ; i++)
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
 49c:	0b c0       	rjmp	.+22     	; 0x4b4 <led_blink+0x3a>
	{
		DIO_toggle(PortNumber,PinNumber);
 49e:	6f 2d       	mov	r22, r15
 4a0:	8e 2d       	mov	r24, r14
 4a2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DIO_toggle>
 4a6:	81 e1       	ldi	r24, 0x11	; 17
 4a8:	9a e7       	ldi	r25, 0x7A	; 122
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <led_blink+0x30>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <led_blink+0x36>
 4b0:	00 00       	nop
		DIO_toggle(PortNumber,PinNumber);
}
void led_blink(u8 PortNumber, u8 PinNumber , int sec )
{
	sec=sec*8;
	for(int i = 0 ; i<sec ; i++)
 4b2:	21 96       	adiw	r28, 0x01	; 1
 4b4:	c0 17       	cp	r28, r16
 4b6:	d1 07       	cpc	r29, r17
 4b8:	94 f3       	brlt	.-28     	; 0x49e <led_blink+0x24>
		DIO_toggle(PortNumber,PinNumber);
		_delay_ms(125);
		
	}
	
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	08 95       	ret

000004c8 <main>:
#include "app/app.h"



int main(void)
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	1f 92       	push	r1
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
    
	app_int();
 4d2:	0e 94 49 00 	call	0x92	; 0x92 <app_int>
	u8 x ;
	while (1) 
    {
	DIO_read(CONROL_PORT,button,&x);
 4d6:	ae 01       	movw	r20, r28
 4d8:	4f 5f       	subi	r20, 0xFF	; 255
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	63 e0       	ldi	r22, 0x03	; 3
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 88 03 	call	0x710	; 0x710 <DIO_read>
		if (x==1)
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	b1 f7       	brne	.-20     	; 0x4d6 <main+0xe>
		{
			app_st();
 4ea:	0e 94 57 01 	call	0x2ae	; 0x2ae <app_st>
 4ee:	f3 cf       	rjmp	.-26     	; 0x4d6 <main+0xe>

000004f0 <DIO_init>:
 */ 
#include "dio.h"

u8 DIO_init(u8 PortNumber , u8 PinNumber , u8 direction)
{
	error_state = ok ;
 4f0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	
	 if (direction == input)
 4f4:	41 11       	cpse	r20, r1
 4f6:	40 c0       	rjmp	.+128    	; 0x578 <DIO_init+0x88>
	 {
		 switch (PortNumber) 
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	99 f0       	breq	.+38     	; 0x522 <DIO_init+0x32>
 4fc:	28 f0       	brcs	.+10     	; 0x508 <DIO_init+0x18>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	e9 f0       	breq	.+58     	; 0x53c <DIO_init+0x4c>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	41 f1       	breq	.+80     	; 0x556 <DIO_init+0x66>
 506:	34 c0       	rjmp	.+104    	; 0x570 <DIO_init+0x80>
		 {
			 case PORT_A :DDRA= CLR_BIT (DDRA,PinNumber);break;
 508:	2a b3       	in	r18, 0x1a	; 26
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_init+0x24>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_init+0x20>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	8a bb       	out	0x1a, r24	; 26
 51e:	8a bb       	out	0x1a, r24	; 26
 520:	6c c0       	rjmp	.+216    	; 0x5fa <DIO_init+0x10a>
			 case PORT_B :DDRB= CLR_BIT (DDRB,PinNumber);break;
 522:	27 b3       	in	r18, 0x17	; 23
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_init+0x3e>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_init+0x3a>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	87 bb       	out	0x17, r24	; 23
 538:	87 bb       	out	0x17, r24	; 23
 53a:	5f c0       	rjmp	.+190    	; 0x5fa <DIO_init+0x10a>
			 case PORT_C: DDRC= CLR_BIT (DDRC,PinNumber);break;
 53c:	24 b3       	in	r18, 0x14	; 20
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_init+0x58>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_init+0x54>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	84 bb       	out	0x14, r24	; 20
 552:	84 bb       	out	0x14, r24	; 20
 554:	52 c0       	rjmp	.+164    	; 0x5fa <DIO_init+0x10a>
			 case PORT_D :DDRD= CLR_BIT (DDRD,PinNumber);break;
 556:	21 b3       	in	r18, 0x11	; 17
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_init+0x72>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_init+0x6e>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	81 bb       	out	0x11, r24	; 17
 56c:	81 bb       	out	0x11, r24	; 17
 56e:	45 c0       	rjmp	.+138    	; 0x5fa <DIO_init+0x10a>
			 default:error_state = Not_ok ;break;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 576:	41 c0       	rjmp	.+130    	; 0x5fa <DIO_init+0x10a>
		 }
		 
	 }else if (direction==output) 
 578:	41 30       	cpi	r20, 0x01	; 1
 57a:	e1 f5       	brne	.+120    	; 0x5f4 <DIO_init+0x104>
	 {
		 switch (PortNumber)
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	91 f0       	breq	.+36     	; 0x5a4 <DIO_init+0xb4>
 580:	28 f0       	brcs	.+10     	; 0x58c <DIO_init+0x9c>
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	d9 f0       	breq	.+54     	; 0x5bc <DIO_init+0xcc>
 586:	83 30       	cpi	r24, 0x03	; 3
 588:	29 f1       	breq	.+74     	; 0x5d4 <DIO_init+0xe4>
 58a:	30 c0       	rjmp	.+96     	; 0x5ec <DIO_init+0xfc>
		 {
			 case PORT_A :DDRA= SET_BIT (DDRA,PinNumber);break;
 58c:	2a b3       	in	r18, 0x1a	; 26
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_init+0xa8>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_init+0xa4>
 59c:	82 2b       	or	r24, r18
 59e:	8a bb       	out	0x1a, r24	; 26
 5a0:	8a bb       	out	0x1a, r24	; 26
 5a2:	2b c0       	rjmp	.+86     	; 0x5fa <DIO_init+0x10a>
			 case PORT_B :DDRB= SET_BIT (DDRB,PinNumber);break;
 5a4:	27 b3       	in	r18, 0x17	; 23
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_init+0xc0>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_init+0xbc>
 5b4:	82 2b       	or	r24, r18
 5b6:	87 bb       	out	0x17, r24	; 23
 5b8:	87 bb       	out	0x17, r24	; 23
 5ba:	1f c0       	rjmp	.+62     	; 0x5fa <DIO_init+0x10a>
			 case PORT_C: DDRC= SET_BIT (DDRC,PinNumber);break;
 5bc:	24 b3       	in	r18, 0x14	; 20
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_init+0xd8>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_init+0xd4>
 5cc:	82 2b       	or	r24, r18
 5ce:	84 bb       	out	0x14, r24	; 20
 5d0:	84 bb       	out	0x14, r24	; 20
 5d2:	13 c0       	rjmp	.+38     	; 0x5fa <DIO_init+0x10a>
			 case PORT_D :DDRD= SET_BIT (DDRD,PinNumber);break;
 5d4:	21 b3       	in	r18, 0x11	; 17
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_init+0xf0>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_init+0xec>
 5e4:	82 2b       	or	r24, r18
 5e6:	81 bb       	out	0x11, r24	; 17
 5e8:	81 bb       	out	0x11, r24	; 17
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <DIO_init+0x10a>
			 default:error_state = Not_ok ;break;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <DIO_init+0x10a>

		 }
      }else
	  {
		  //error
		  error_state = Not_ok ;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>

	  } 
	  return error_state ;
}
 5fa:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 5fe:	08 95       	ret

00000600 <DIO_write>:
u8 DIO_write(u8 PortNumber , u8 PinNumber , u8 value)
{
	error_state = ok ;
 600:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	if (value == low)
 604:	41 11       	cpse	r20, r1
 606:	40 c0       	rjmp	.+128    	; 0x688 <DIO_write+0x88>
	{
		switch (PortNumber)
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	99 f0       	breq	.+38     	; 0x632 <DIO_write+0x32>
 60c:	28 f0       	brcs	.+10     	; 0x618 <DIO_write+0x18>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	e9 f0       	breq	.+58     	; 0x64c <DIO_write+0x4c>
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	41 f1       	breq	.+80     	; 0x666 <DIO_write+0x66>
 616:	34 c0       	rjmp	.+104    	; 0x680 <DIO_write+0x80>
		{
			case PORT_A :PORTA= CLR_BIT (PORTA,PinNumber);break;
 618:	2b b3       	in	r18, 0x1b	; 27
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_write+0x24>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_write+0x20>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	8b bb       	out	0x1b, r24	; 27
 62e:	8b bb       	out	0x1b, r24	; 27
 630:	6c c0       	rjmp	.+216    	; 0x70a <DIO_write+0x10a>
			case PORT_B :PORTB= CLR_BIT (PORTB,PinNumber);break;
 632:	28 b3       	in	r18, 0x18	; 24
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_write+0x3e>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_write+0x3a>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	88 bb       	out	0x18, r24	; 24
 648:	88 bb       	out	0x18, r24	; 24
 64a:	5f c0       	rjmp	.+190    	; 0x70a <DIO_write+0x10a>
			case PORT_C: PORTC= CLR_BIT (PORTC,PinNumber);break;
 64c:	25 b3       	in	r18, 0x15	; 21
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_write+0x58>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_write+0x54>
 65c:	80 95       	com	r24
 65e:	82 23       	and	r24, r18
 660:	85 bb       	out	0x15, r24	; 21
 662:	85 bb       	out	0x15, r24	; 21
 664:	52 c0       	rjmp	.+164    	; 0x70a <DIO_write+0x10a>
			case PORT_D :PORTD= CLR_BIT (PORTD,PinNumber);break;
 666:	22 b3       	in	r18, 0x12	; 18
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_write+0x72>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	6a 95       	dec	r22
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_write+0x6e>
 676:	80 95       	com	r24
 678:	82 23       	and	r24, r18
 67a:	82 bb       	out	0x12, r24	; 18
 67c:	82 bb       	out	0x12, r24	; 18
 67e:	45 c0       	rjmp	.+138    	; 0x70a <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 686:	41 c0       	rjmp	.+130    	; 0x70a <DIO_write+0x10a>
		}
		
	}else if (value==high)
 688:	41 30       	cpi	r20, 0x01	; 1
 68a:	e1 f5       	brne	.+120    	; 0x704 <DIO_write+0x104>
	{
		switch (PortNumber)
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 f0       	breq	.+36     	; 0x6b4 <DIO_write+0xb4>
 690:	28 f0       	brcs	.+10     	; 0x69c <DIO_write+0x9c>
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	d9 f0       	breq	.+54     	; 0x6cc <DIO_write+0xcc>
 696:	83 30       	cpi	r24, 0x03	; 3
 698:	29 f1       	breq	.+74     	; 0x6e4 <DIO_write+0xe4>
 69a:	30 c0       	rjmp	.+96     	; 0x6fc <DIO_write+0xfc>
		{
			case PORT_A :PORTA= SET_BIT (PORTA,PinNumber);break;
 69c:	2b b3       	in	r18, 0x1b	; 27
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_write+0xa8>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_write+0xa4>
 6ac:	82 2b       	or	r24, r18
 6ae:	8b bb       	out	0x1b, r24	; 27
 6b0:	8b bb       	out	0x1b, r24	; 27
 6b2:	2b c0       	rjmp	.+86     	; 0x70a <DIO_write+0x10a>
			case PORT_B :PORTB= SET_BIT (PORTB,PinNumber);break;
 6b4:	28 b3       	in	r18, 0x18	; 24
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_write+0xc0>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_write+0xbc>
 6c4:	82 2b       	or	r24, r18
 6c6:	88 bb       	out	0x18, r24	; 24
 6c8:	88 bb       	out	0x18, r24	; 24
 6ca:	1f c0       	rjmp	.+62     	; 0x70a <DIO_write+0x10a>
			case PORT_C: PORTC= SET_BIT (PORTC,PinNumber);break;
 6cc:	25 b3       	in	r18, 0x15	; 21
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_write+0xd8>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_write+0xd4>
 6dc:	82 2b       	or	r24, r18
 6de:	85 bb       	out	0x15, r24	; 21
 6e0:	85 bb       	out	0x15, r24	; 21
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <DIO_write+0x10a>
			case PORT_D :PORTD= SET_BIT (PORTD,PinNumber);break;
 6e4:	22 b3       	in	r18, 0x12	; 18
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_write+0xf0>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_write+0xec>
 6f4:	82 2b       	or	r24, r18
 6f6:	82 bb       	out	0x12, r24	; 18
 6f8:	82 bb       	out	0x12, r24	; 18
 6fa:	07 c0       	rjmp	.+14     	; 0x70a <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 702:	03 c0       	rjmp	.+6      	; 0x70a <DIO_write+0x10a>
			
		}
	}else
	{
		//error
		error_state = Not_ok ;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
	}
	return error_state ;
}
 70a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 70e:	08 95       	ret

00000710 <DIO_read>:
u8 DIO_read(u8 PortNumber , u8 PinNumber , u8 * value)
{
	error_state = ok ;
 710:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	switch (PortNumber)
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	e9 f0       	breq	.+58     	; 0x752 <DIO_read+0x42>
 718:	30 f0       	brcs	.+12     	; 0x726 <DIO_read+0x16>
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	81 f1       	breq	.+96     	; 0x77e <DIO_read+0x6e>
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	09 f4       	brne	.+2      	; 0x724 <DIO_read+0x14>
 722:	43 c0       	rjmp	.+134    	; 0x7aa <DIO_read+0x9a>
 724:	58 c0       	rjmp	.+176    	; 0x7d6 <DIO_read+0xc6>
	{
		case PORT_A : * value = GET_BIT(PINA,PinNumber);break;
 726:	79 b3       	in	r23, 0x19	; 25
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	9c 01       	movw	r18, r24
 72e:	06 2e       	mov	r0, r22
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_read+0x26>
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	0a 94       	dec	r0
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_read+0x22>
 73a:	87 2f       	mov	r24, r23
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	82 23       	and	r24, r18
 740:	93 23       	and	r25, r19
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_read+0x38>
 744:	95 95       	asr	r25
 746:	87 95       	ror	r24
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_read+0x34>
 74c:	fa 01       	movw	r30, r20
 74e:	80 83       	st	Z, r24
 750:	45 c0       	rjmp	.+138    	; 0x7dc <DIO_read+0xcc>
		case PORT_B : * value = GET_BIT(PINB,PinNumber);break;
 752:	76 b3       	in	r23, 0x16	; 22
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	9c 01       	movw	r18, r24
 75a:	06 2e       	mov	r0, r22
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_read+0x52>
 75e:	22 0f       	add	r18, r18
 760:	33 1f       	adc	r19, r19
 762:	0a 94       	dec	r0
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_read+0x4e>
 766:	87 2f       	mov	r24, r23
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	82 23       	and	r24, r18
 76c:	93 23       	and	r25, r19
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_read+0x64>
 770:	95 95       	asr	r25
 772:	87 95       	ror	r24
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_read+0x60>
 778:	fa 01       	movw	r30, r20
 77a:	80 83       	st	Z, r24
 77c:	2f c0       	rjmp	.+94     	; 0x7dc <DIO_read+0xcc>
		case PORT_C : * value = GET_BIT(PINC,PinNumber);break;
 77e:	73 b3       	in	r23, 0x13	; 19
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	9c 01       	movw	r18, r24
 786:	06 2e       	mov	r0, r22
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_read+0x7e>
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_read+0x7a>
 792:	87 2f       	mov	r24, r23
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	82 23       	and	r24, r18
 798:	93 23       	and	r25, r19
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_read+0x90>
 79c:	95 95       	asr	r25
 79e:	87 95       	ror	r24
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_read+0x8c>
 7a4:	fa 01       	movw	r30, r20
 7a6:	80 83       	st	Z, r24
 7a8:	19 c0       	rjmp	.+50     	; 0x7dc <DIO_read+0xcc>
		case PORT_D : * value = GET_BIT(PIND,PinNumber);break;
 7aa:	70 b3       	in	r23, 0x10	; 16
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	9c 01       	movw	r18, r24
 7b2:	06 2e       	mov	r0, r22
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_read+0xaa>
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_read+0xa6>
 7be:	87 2f       	mov	r24, r23
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	82 23       	and	r24, r18
 7c4:	93 23       	and	r25, r19
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_read+0xbc>
 7c8:	95 95       	asr	r25
 7ca:	87 95       	ror	r24
 7cc:	6a 95       	dec	r22
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_read+0xb8>
 7d0:	fa 01       	movw	r30, r20
 7d2:	80 83       	st	Z, r24
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <DIO_read+0xcc>
		default:error_state = Not_ok;break;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
	}
	return error_state ;
}
 7dc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 7e0:	08 95       	ret

000007e2 <DIO_toggle>:
u8 DIO_toggle(u8 PortNumber , u8 PinNumber )
{
	error_state = ok ;
 7e2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	switch (PortNumber)
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	91 f0       	breq	.+36     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7ea:	28 f0       	brcs	.+10     	; 0x7f6 <DIO_toggle+0x14>
 7ec:	82 30       	cpi	r24, 0x02	; 2
 7ee:	d9 f0       	breq	.+54     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f0:	83 30       	cpi	r24, 0x03	; 3
 7f2:	29 f1       	breq	.+74     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 7f4:	30 c0       	rjmp	.+96     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
	{
		case PORT_A :PORTA= TOGGLE_BIT (PORTA,PinNumber);break;
 7f6:	2b b3       	in	r18, 0x1b	; 27
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	6a 95       	dec	r22
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_toggle+0x1c>
 806:	82 27       	eor	r24, r18
 808:	8b bb       	out	0x1b, r24	; 27
 80a:	8b bb       	out	0x1b, r24	; 27
 80c:	27 c0       	rjmp	.+78     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_B :PORTB= TOGGLE_BIT (PORTB,PinNumber);break;
 80e:	28 b3       	in	r18, 0x18	; 24
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	6a 95       	dec	r22
 81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	82 27       	eor	r24, r18
 820:	88 bb       	out	0x18, r24	; 24
 822:	88 bb       	out	0x18, r24	; 24
 824:	1b c0       	rjmp	.+54     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_C: PORTC= TOGGLE_BIT (PORTC,PinNumber);break;
 826:	25 b3       	in	r18, 0x15	; 21
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	6a 95       	dec	r22
 834:	e2 f7       	brpl	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	82 27       	eor	r24, r18
 838:	85 bb       	out	0x15, r24	; 21
 83a:	85 bb       	out	0x15, r24	; 21
 83c:	0f c0       	rjmp	.+30     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case PORT_D :PORTD= TOGGLE_BIT (PORTD,PinNumber);break;
 83e:	22 b3       	in	r18, 0x12	; 18
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	6a 95       	dec	r22
 84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	82 27       	eor	r24, r18
 850:	82 bb       	out	0x12, r24	; 18
 852:	82 bb       	out	0x12, r24	; 18
 854:	03 c0       	rjmp	.+6      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		default:error_state = Not_ok;break;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
	}
	return error_state ;
}
 85c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
